# -*- coding: utf-8 -*-
"""KitchenApp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17DnslnEY599SEPZEiaNx8yEkt5OcgOwc
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import os

# Optional: for chatbot (GenAI)
from openai import OpenAI

# --- Load Model & Data ---
import streamlit as st
import joblib
import pandas as pd

try:
    model = joblib.load("model_pipeline.joblib")
    df = pd.read_csv("cleaned_orders_data.csv")
    st.success("Model and data loaded successfully!")
except Exception as e:
    st.error(f"Error loading model or data: {e}")

import joblib

# Save your trained model pipeline properly
joblib.dump(model, "model_pipeline.joblib")
print(" Model saved as model_pipeline.joblib")

# PAGE CONFIG
# ---------------------------
st.set_page_config(page_title="Cloud Kitchen Predictor + Chatbot", layout="wide")

# SIDEBAR INPUTS
# ---------------------------
st.sidebar.header("Input Data for Prediction")
sample = {}

# Dynamically create input boxes for first 5 features
for col in df.columns[:5]:
    if pd.api.types.is_numeric_dtype(df[col]):
        val = st.sidebar.number_input(
            f"Enter value for {col}",
            float(df[col].min()),
            float(df[col].max()),
            float(df[col].mean())
        )
    else:
        options = df[col].unique().tolist()
        val = st.sidebar.selectbox(f"Select value for {col}", options)
    sample[col] = val

if st.sidebar.button("Predict Sales"):
    X_input = pd.DataFrame([sample])
    try:
        pred = model.predict(X_input)[0]
        st.success(f"Predicted Sales: â‚¹{round(pred, 2)}")
    except Exception as e:
        st.error(f"Prediction error: {e}")

# ---------------------------
# GEN AI CHATBOT SECTION
# ---------------------------
st.header("AI Assistant")
st.write("Ask me anything about data analysis or predictions!")

user_input = st.text_input("Your Question:")

# Try to get API key safely (works locally + on cloud)
openai_api_key = os.getenv("OPENAI_API_KEY", None)
if not openai_api_key:
    try:
        openai_api_key = st.secrets["OPENAI_API_KEY"]
    except Exception:
        openai_api_key = None

# Initialize client only if key exists
if openai_api_key:
    client = OpenAI(api_key=openai_api_key)

if st.button("Chat with AI"):
    if not openai_api_key:
        st.warning("No OpenAI API key found. Add it in Streamlit Secrets or set environment variable.")
    elif user_input.strip() == "":
        st.info("Please enter a question first.")
    else:
        try:
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "You are an expert AI assistant for data science projects."},
                    {"role": "user", "content": user_input}
                ]
            )
            st.markdown("**AI:** " + response.choices[0].message.content)
        except Exception as e:
            st.error(f"Chatbot error: {e}")

# FOOTER
# ---------------------------
st.markdown("---")
st.caption("Made with Love using Streamlit and OpenAI.")



